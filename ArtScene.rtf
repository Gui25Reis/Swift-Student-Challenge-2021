{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red248\green80\blue153;\red0\green0\blue0;\red255\green255\blue255;
\red213\green177\blue255;\red107\green170\blue67;\red197\green176\blue68;}
{\*\expandedcolortbl;;\cssrgb\c98896\c42114\c66499;\csgray\c0\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c87028\c75839\c99946;\cssrgb\c48672\c70957\c33070;\cssrgb\c81473\c73653\c33549;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // ArtScene.swift\
\
import\cf4   SpriteKit
\f1 \cf0 \
\

\f0 \cf2 public\cf4  \cf2 class\cf4  ArtScene: \cf5 SKScene\cf4  \{
\f1 \cf0 \

\f0 \cf4     \cf6 // Atributos da classe
\f1 \cf0 \

\f0 \cf4     \cf2 var\cf4  allParticles:[\cf5 Particle\cf4 ] = []
\f1 \cf0 \

\f0 \cf4     \cf2 var\cf4  userNode:\cf5 Particle\cf4  = Particle()
\f1 \cf0 \

\f0 \cf4     \cf2 var\cf4  gameOn:\cf5 Bool\cf4  = \cf2 false
\f1 \cf0 \

\f0 \cf4     \cf2 var\cf4  oldSize:[\cf5 CGFloat\cf4 ] = [\cf7 0\cf4  , \cf7 0\cf4 ]
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf6 // didMove: Mostra algo na tela
\f1 \cf0 \

\f0 \cf4     \cf2 public\cf4  \cf2 override\cf4  \cf2 func\cf4  didMove(to view: \cf5 SKView\cf4 ) \{
\f1 \cf0 \

\f0 \cf4         \cf2 super\cf4 .didMove(to: view)
\f1 \cf0 \

\f0 \cf4         backgroundColor =  colorLiteral(red: 0.0, green: 0.4293115139, blue: 0.5599628091, alpha: 1.0)
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf2 for\cf4  i \cf2 in\cf4  \cf7 0\cf4 ..<\cf7 10\cf4  \{
\f1 \cf0 \

\f0 \cf4             \cf2 var\cf4  p = Particle()
\f1 \cf0 \

\f0 \cf4             \cf2 self\cf4 .addChild(p.getNode())
\f1 \cf0 \

\f0 \cf4             allParticles.append(p)
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf2 self\cf4 .userNode.setUserColor()
\f1 \cf0 \

\f0 \cf4         \cf2 self\cf4 .addChild(\cf2 self\cf4 .userNode.getNode())
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf6 // M\'e9todo chamado toda vez que muda o tamanho da tela
\f1 \cf0 \

\f0 \cf4     \cf6 // _ : quando chamar a fun\'e7\'e3o n vai precisar coloca o nome do par\'e2metro, apenas o valor 
\f1 \cf0 \

\f0 \cf4     \cf2 public\cf4  \cf2 override\cf4  \cf2 func\cf4  didChangeSize(\cf2 _\cf4  oldSize: \cf5 CGSize\cf4 ) \{
\f1 \cf0 \

\f0 \cf4         \cf2 if\cf4  (\cf2 self\cf4 .oldSize[\cf7 0\cf4 ] > \cf7 2\cf4 ) \{ 
\f1 \cf0 \

\f0 \cf4             \cf2 if\cf4  (!\cf2 self\cf4 .gameOn) \{
\f1 \cf0 \

\f0 \cf4                 \cf2 for\cf4  p \cf2 in\cf4  allParticles \{ 
\f1 \cf0 \

\f0 \cf4                     \cf2 var\cf4  x = CGFloat.random(in: \cf7 0\cf4 ...\cf2 self\cf4 .size.width)
\f1 \cf0 \

\f0 \cf4                     \cf2 var\cf4  y = CGFloat.random(in: \cf7 0\cf4 ...\cf2 self\cf4 .size.height)
\f1 \cf0 \

\f0 \cf4                     p.setPositions(x, y)
\f1 \cf0 \

\f0 \cf4                 \}
\f1 \cf0 \

\f0 \cf4                 \cf2 self\cf4 .userNode.setPositions(\cf2 self\cf4 .size.width / \cf7 2\cf4 , \cf2 self\cf4 .size.height / \cf7 2\cf4 )
\f1 \cf0 \

\f0 \cf4                 \cf2 self\cf4 .gameOn = \cf2 true
\f1 \cf0 \

\f0 \cf4             \} \cf2 else\cf4  \{
\f1 \cf0 \

\f0 \cf4                 \cf2 for\cf4  p \cf2 in\cf4  allParticles \{
\f1 \cf0 \

\f0 \cf4                     setNewPosition(p_: p)
\f1 \cf0 \

\f0 \cf4                 \}
\f1 \cf0 \

\f0 \cf4                 setNewPosition(p_: userNode)
\f1 \cf0 \

\f0 \cf4             \}
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4         \cf2 self\cf4 .oldSize = [\cf2 self\cf4 .size.width, \cf2 self\cf4 .size.height]
\f1 \cf0 \

\f0 \cf4         print(\cf2 self\cf4 .oldSize)
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf6 // M\'e9todo: atualiza a janela
\f1 \cf0 \

\f0 \cf4     \cf2 public\cf4  \cf2 override\cf4  \cf2 func\cf4  update(\cf2 _\cf4  currentTime: \cf5 TimeInterval\cf4 ) \{
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  uPositions = \cf2 self\cf4 .userNode.getPositions()
\f1 \cf0 \

\f0 \cf4         \cf2 self\cf4 .userNode.setPositions(uPositions[\cf7 0\cf4 ]+\cf7 0.3\cf4 , uPositions[\cf7 1\cf4 ])
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  userNodePosition = CGPoint(x: uPositions[\cf7 0\cf4 ] , y: uPositions[\cf7 1\cf4 ])
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  act = SKAction.move(to: userNodePosition, duration: \cf7 8\cf4 )
\f1 \cf0 \

\f0 \cf4         
\f1 \cf0 \

\f0 \cf4         uPositions = \cf2 self\cf4 .userNode.getPositions()
\f1 \cf0 \

\f0 \cf4         \cf2 for\cf4  p \cf2 in\cf4  \cf7 0\cf4 ..<allParticles.count\{
\f1 \cf0 \

\f0 \cf4             \cf2 var\cf4  pos = allParticles[p].getPositions()
\f1 \cf0 \

\f0 \cf4             allParticles[p].setRun(act)
\f1 \cf0 \

\f0 \cf4             
\f1 \cf0 \

\f0 \cf4             \cf2 if\cf4  getDistance(n1_: pos, n2_: uPositions)-\cf7 17\cf4  < \cf2 self\cf4 .userNode.getRadius()\{
\f1 \cf0 \

\f0 \cf4                 allParticles.remove(at: p)
\f1 \cf0 \

\f0 \cf4                 \cf2 self\cf4 .removeAllChildren()
\f1 \cf0 \

\f0 \cf4                 \cf2 break
\f1 \cf0 \

\f0 \cf4             \}
\f1 \cf0 \

\f0 \cf4         \}
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf6 // Pega a dist\'e2ncia dos pontos
\f1 \cf0 \

\f0 \cf4     \cf2 func\cf4  getDistance(n1_:[\cf5 CGFloat\cf4 ], n2_:[\cf5 CGFloat\cf4 ]) -> \cf5 CGFloat\cf4  \{
\f1 \cf0 \

\f0 \cf4         \cf2 return\cf4  CGFloat(sqrt(pow(n1_[\cf7 0\cf4 ] - n2_[\cf7 0\cf4 ], \cf7 2\cf4 ) + pow(n1_[\cf7 1\cf4 ] - n2_[\cf7 1\cf4 ], \cf7 2\cf4 )))
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4     
\f1 \cf0 \

\f0 \cf4     \cf6 // Define as posi\'e7\'f5es quando muda de tela
\f1 \cf0 \

\f0 \cf4     \cf2 func\cf4  setNewPosition(p_:\cf5 Particle\cf4 ) \{
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  pos = p_.getPositions()
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  x = (\cf2 self\cf4 .oldSize[\cf7 0\cf4 ]*pos[\cf7 0\cf4 ]) / \cf2 self\cf4 .size.width
\f1 \cf0 \

\f0 \cf4         \cf2 var\cf4  y = (\cf2 self\cf4 .oldSize[\cf7 1\cf4 ]*pos[\cf7 1\cf4 ]) / \cf2 self\cf4 .size.height
\f1 \cf0 \

\f0 \cf4         p_.setPositions(x, y)
\f1 \cf0 \

\f0 \cf4     \}
\f1 \cf0 \

\f0 \cf4 \}
\f1 \cf0 \
}